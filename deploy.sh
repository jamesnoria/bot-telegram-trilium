#!/bin/bash

# Script de deployment para servidor de producci√≥n
# Bot de Telegram con Trilium

set -e

echo "üöÄ Iniciando deployment del Bot de Telegram..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

# Verificar que Docker est√© instalado
if ! command -v docker &> /dev/null; then
    error "Docker no est√° instalado. Por favor inst√°lalo primero."
fi

# Verificar que Docker Compose est√© disponible
if ! docker compose version &> /dev/null; then
    error "Docker Compose no est√° disponible. Por favor inst√°lalo primero."
fi

# Crear directorio de logs si no existe
log "Creando directorio de logs..."
mkdir -p ./logs
chmod 755 ./logs

# Verificar archivo de configuraci√≥n
if [ ! -f .env ]; then
    warn "Archivo .env no encontrado. Copiando desde .env.example..."
    cp .env.example .env
    warn "Por favor edita .env con tu configuraci√≥n antes de continuar."
    read -p "¬øHas configurado .env? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        error "Por favor configura .env y ejecuta el script nuevamente."
    fi
fi

# Parar contenedor existente si est√° corriendo
log "Deteniendo contenedor existente (si existe)..."
docker compose -f docker-compose.server.yml down --remove-orphans || true

# Actualizar imagen
log "Descargando √∫ltima imagen del bot..."
docker pull ghcr.io/jamesnoria/bot-telegram-trilium:latest

# Limpiar im√°genes no utilizadas
log "Limpiando im√°genes Docker no utilizadas..."
docker image prune -f || true

# Iniciar servicio
log "Iniciando bot de Telegram..."
docker compose -f docker-compose.server.yml up -d

# Verificar que el contenedor est√© corriendo
sleep 5
if docker compose -f docker-compose.server.yml ps | grep -q "Up"; then
    log "‚úÖ Bot desplegado exitosamente!"
    log "üìä Estado del contenedor:"
    docker compose -f docker-compose.server.yml ps
    log ""
    log "üìã Para ver logs en tiempo real:"
    echo -e "${BLUE}docker compose -f docker-compose.server.yml logs -f${NC}"
    log ""
    log "üõë Para detener el bot:"
    echo -e "${BLUE}docker compose -f docker-compose.server.yml down${NC}"
else
    error "‚ùå Error al desplegar el bot. Verifica los logs:"
    docker compose -f docker-compose.server.yml logs
fi

log "üéâ Deployment completado!"
